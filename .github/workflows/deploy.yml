name: Deploy to Oracle VM

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate lowercase tag
        id: docker_meta
        run: echo "TAG=ghcr.io/$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]'):latest" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.TAG }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: ${{ secrets.VM_PORT }}
          script: |
            # Set variables
            IMAGE_NAME="ghcr.io/$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]'):latest"
            CONTAINER_NAME="pawlie-backend"
            NETWORK_NAME="pawlie-network"

            # Create .env file
            echo "${{ secrets.ENV_FILE }}" > .env

            # Create and unzip the Oracle Wallet
            echo "Creating Oracle Wallet..."
            sudo apt-get update && sudo apt-get install -y unzip || true
            echo "${{ secrets.ORACLE_WALLET_B64 }}" | base64 -d > wallet.zip
            mkdir -p wallet
            unzip -o wallet.zip -d ./wallet

            # Login to GitHub Container Registry
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

            # Pull the latest image
            echo "Pulling latest Docker image..."
            docker pull $IMAGE_NAME

            # Stop and remove the old container if it exists
            if [ $(docker ps -a -q -f name=^/${CONTAINER_NAME}$) ]; then
                echo "Stopping and removing old container..."
                docker stop $CONTAINER_NAME
                docker rm $CONTAINER_NAME
            fi

            # Create network if it doesn't exist
            if ! docker network ls | grep -q $NETWORK_NAME; then
                echo "Creating Docker network: $NETWORK_NAME"
                docker network create $NETWORK_NAME
            fi

            # Run the new container with wallet
            echo "Running new container with Oracle Wallet..."
            docker run -d \
                --name $CONTAINER_NAME \
                --network $NETWORK_NAME \
                --restart always \
                -p 3000:3000 \
                --env-file .env \
                -e TNS_ADMIN=/usr/src/app/wallet \
                -v $(pwd)/wallet:/usr/src/app/wallet \
                $IMAGE_NAME

            echo "Deployment finished successfully!"
